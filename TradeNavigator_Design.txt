✅ **Final Tech Stack for Your Project:**  
1️⃣ **ReactJS** → UI (ApexCharts for charts, API calls to backend)  
2️⃣ **.NET Core API** → Backend (fetching crypto data, calculating indicators, handling WebSockets)  
3️⃣ **Python (Future)** → Machine Learning (if implemented later)  
----------------------------------------------------------------------------------------------------------
📌 Data Types for Indicator/Strategy Building
Data Type	Source	Approach
Open Interest	REST + WS	Fetch historical OI via REST and merge with live OI from WS for real-time tracking.
Funding Rate	REST + WS	Fetch funding rate history via REST and get live funding rate via WS for accurate trading costs.
Liquidation	REST + WS	Use REST for liquidation history and WS for live liquidation events to monitor market moves.
Long/Short Ratio	REST + WS	Fetch historical sentiment via REST and use WS for real-time market positioning insights.
OHLCV (Candlestick Data)	REST + WS	Use REST for historical data and WS for live updates to keep charts up to date.
Trade Book (Optional)	WS	Stream real-time trade book via WS for advanced market depth analysis.
----------------------------------------------------------------------------------------------------------
Project Name: 🚀 TradeNavigator – The overall platform for crypto trading, strategies, and analysis.
Backend: ⚙️ TradeHorizon – The core backend API handling indicators, data, and trading logic.
Frontend: 💻 FuturesIQ – The UI where charts, strategies, and market data are visualized.
ML Module: 🤖 AlphaMind – The future AI-powered analytics and predictive model component
----------------------------------------------------------------------------------------------------------
✅ DynamoDB Use Cases:
1️⃣ User Strategies & Settings
Selected indicators, thresholds, timeframes, risk levels
Custom entry/exit rules for strategies
2️⃣ Backtesting Configurations
Strategy parameters used for historical testing
Backtest results, success rate, PnL
3️⃣ Custom Indicator Parameters
Users modifying default formulas or settings
----------------------------------------------------------------------------------------------------------
Yes, that's the correct architecture! Here's how each layer's responsibility is structured:  
### **Layer Responsibilities**  
✅ **API (Controller Layer)**  
- Exposes **endpoints** for external clients.  
- Handles **request validation & response formatting**.  
- Calls **Business Layer** for processing.  
✅ **Business Layer**  
- Contains the **core logic** (filtering, calculations, transformations).  
- Serves as an **intermediary** between API & DataAccess layers.  
- Ensures **data consistency** and applies **business rules**.  
✅ **Data Access Layer**  
- Handles **external API, WebSocket, and DynamoDB interactions**.  
- Fetches, stores, or updates data as needed.  
- No business logic—just **data retrieval/storage**.  
### **Call Flow**  
**API → Business → DataAccess → External Source (API/DB/WebSocket)**  
This keeps concerns **separated**, making your application **scalable & maintainable**. 🚀
----------------------------------------------------------------------------------------------------------
Why MVC?
Model → Defined in Domain Layer (Entities, DTOs, Enums).
View → Not applicable in the backend (handled by frontend- reactJS).
Controller → Defined in API Layer (Controllers handling HTTP/WebSocket requests)
----------------------------------------------------------------------------------------------------------
1️⃣ Query Parameters (?key=value) → Used for GET requests (filters, search).
2️⃣ Body Parameters (JSON) → Used for POST, PUT, PATCH requests.
3️⃣ Route Parameters (/{id}) → Used for DELETE & required IDs.
4️⃣ Header Parameters (Authorization: Bearer <token>) → Used for JWT Authentication.
🚀 This structure is the most commonly used in real-world .NET Core APIs!
----------------------------------------------------------------------------------------------------------
✔ Use Task<T> when an async method returns a value.
✔ Use Task when an async method does NOT return a value.
----------------------------------------------------------------------------------------------------------
Here’s the **final comprehensive list** of factors:  
### **📌 Final List of Factors for Futures Market Analysis**  
#### **✅ Existing Factors (Directly Available from API)**  
Open Interest History  
Funding Rate History  
Liquidation History  
Long/Short Ratio History  
OHLCV (Candlestick) History  
Order Book Data  
#### **🔹 Derived Factors (Calculated from API Data)**  
Estimated Leverage Ratio (ELR)  
Whale Activity Index
Funding Rate Spread  
Bid-Ask Spread  
Order Book Imbalance Ratio  
Liquidation Delta  
Funding Rate Volatility  
Volume-Weighted Average Price (VWAP)  
OI Delta % (Open Interest Change)  
----------------------------------------------------------------------------------------------------------
